{
    "task": "swinir_dewatermark"     //  color Gaussian denoising for noise level 15/25/50. root/task/images-models-options
    , "model": "plain" // "plain" | "plain2" if two inputs
    , "gpu_ids": [0]

    , "n_channels": 3  // broadcast to "datasets", 1 for grayscale, 3 for color
  
    , "path": {
      "root": "dewatermark"            // "denoising" | "superresolution" | "dejpeg"
      , "pretrained_netG": "118000_G.pth"      // path of pretrained model
      , "pretrained_netE": "118000_E.pth"      // path of pretrained model
    }
  
    , "datasets": {
      "train": {
        "name": "train_dataset"           // just name
        , "dataset_type": "dwcnn"         // "dncnn" | "dnpatch" | "fdncnn" | "ffdnet" | "sr" | "srmd" | "dpsr" | "plain" | "plainpatch" | "jpeg"
        , "dataroot_H": "G:/My Drive/demark/train" // path of H training dataset. DIV2K (800 training images) + Flickr2K (2650 images) + BSD500 (400 training&testing images) + WED(4744 images) in SwinIR
        , "dataroot_L": null              // path of L training dataset
        , "watermark": "G:/My Drive/demark/sh-logo.png"
        , "H_size": 256                   // patch_size
        
        , "dataloader_shuffle": true
        , "dataloader_num_workers": 1
        , "dataloader_batch_size": 1      // batch size 1 | 16 | 32 | 48 | 64 | 128. Total batch size =1x8=8 in SwinIR
      }
      , "test": {
        "name": "test_dataset"            // just name
        , "dataset_type": "dwcnn"         // "dncnn" | "dnpatch" | "fdncnn" | "ffdnet" | "sr" | "srmd" | "dpsr" | "plain" | "plainpatch" | "jpeg"
        , "dataroot_H": "G:/My Drive/demark/test"  // path of H testing dataset
        , "dataroot_L": null              // path of L testing dataset
        , "watermark": "G:/My Drive/demark/sh-logo.png"
        , "H_size": 256                   // patch_size
      }
    }
    , "netG": {
        "net_type": "rrdb"  // "dncnn" | "fdncnn" | "ffdnet" | "srmd" | "dpsr" | "msrresnet0" |  "msrresnet1" | "rrdb" 
        , "in_nc": 3        // input channel number
        , "out_nc": 3       // ouput channel number
        , "nc": 64          // 96 for "dpsr", 128 for "srmd", 64 for "dncnn" and "rrdb"
        , "nb": 23          // 23 for "rrdb", 12 for "srmd", 15 for "ffdnet", 20 for "dncnn", 16 for "srresnet" and "dpsr"
        , "gc": 32          // number of growth channels for "rrdb"
        , "ng": 2           // unused
        , "reduction" : 16  // unused
        , "act_mode": "R"   // "BR" for BN+ReLU | "R" for ReLU
        , "upsample_mode": "upconv"         // "pixelshuffle" | "convtranspose" | "upconv"
        , "downsample_mode": "strideconv"   // "strideconv" | "avgpool" | "maxpool"
    
        , "init_type": "orthogonal"         // "orthogonal" | "normal" | "uniform" | "xavier_normal" | "xavier_uniform" | "kaiming_normal" | "kaiming_uniform"
        , "init_bn_type": "uniform"         // "uniform" | "constant"
        , "init_gain": 0.2
      }  
    , "train": {
      "G_lossfn_type": "l1"      // "l1" | "l2sum" | "l2" | "ssim" | "charbonnier" preferred
      , "G_lossfn_weight": 1.0            // default
      , "G_charbonnier_eps": 1e-9
  
      , "E_decay": 0.999                  // Exponential Moving Average for netG: set 0 to disable; default setting 0.999
  
      , "G_optimizer_type": "adam"        // fixed, adam is enough
      , "G_optimizer_lr": 2e-4            // learning rate
      , "G_optimizer_wd": 0               // weight decay, default 0
      , "G_optimizer_clipgrad": null      // unused
      , "G_optimizer_reuse": true         // 
  
      , "G_scheduler_type": "MultiStepLR" // "MultiStepLR" is enough
      , "G_scheduler_milestones": [800000, 1200000, 1400000, 1500000, 1600000]
      , "G_scheduler_gamma": 0.5
  
      , "G_regularizer_orthstep": null    // unused
      , "G_regularizer_clipstep": null    // unused
  
      , "G_param_strict": true
      , "E_param_strict": true
  
      , "checkpoint_test": 1000           // for testing
      , "checkpoint_save": 1000           // for saving model
      , "checkpoint_print": 200           // for print
    }
  }
  